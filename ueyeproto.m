function [methodinfo,structs,enuminfo,ThunkLibName]=ueyeproto
%UEYEPROTO Create structures to define interfaces found in 'ueye'.

%This function was generated by loadlibrary.m parser version  on Sat Jan  2 18:57:02 2016
%perl options:'ueye.i -outfile=ueyeproto.m -thunkfile=libueye_api_thunk_glnxa64.c -header=ueye.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libueye_api_thunk_glnxa64');
%% INT is_CaptureStatus ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_CaptureStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_WaitEvent ( HIDS hCam , INT which , INT nTimeout ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_WaitEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetSaturation ( HIDS hCam , INT ChromU , INT ChromV ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_SetSaturation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_PrepareStealVideo ( HIDS hCam , int Mode , ULONG StealColorMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32uint32Thunk';fcns.name{fcnNum}='is_PrepareStealVideo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'uint32'};fcnNum=fcnNum+1;
%% INT is_GetNumberOfDevices ( void ); 
%fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='is_GetNumberOfDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%% INT is_StopLiveVideo ( HIDS hCam , INT Wait ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_StopLiveVideo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
% INT is_FreezeVideo ( HIDS hCam , INT Wait ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_FreezeVideo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_CaptureVideo ( HIDS hCam , INT Wait ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_CaptureVideo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_IsVideoFinish ( HIDS hCam , INT * pValue ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_IsVideoFinish'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_HasVideoStarted ( HIDS hCam , BOOL * pbo ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_HasVideoStarted'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_AllocImageMem ( HIDS hCam , INT width , INT height , INT bitspixel , char ** ppcImgMem , int * pid ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_AllocImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'int32', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% INT is_SetImageMem ( HIDS hCam , char * pcMem , int id ); 
fcns.thunkname{fcnNum}='int32uint32cstringint32Thunk';fcns.name{fcnNum}='is_SetImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
%% INT is_FreeImageMem ( HIDS hCam , char * pcMem , int id ); 
%fcns.thunkname{fcnNum}='int32uint32cstringint32Thunk';fcns.name{fcnNum}='is_FreeImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetImageMem ( HIDS hCam , VOID ** pMem ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'voidPtrPtr'};fcnNum=fcnNum+1;
%% INT is_GetActiveImageMem ( HIDS hCam , char ** ppcMem , int * pnID ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetActiveImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_InquireImageMem ( HIDS hCam , char * pcMem , int nID , int * pnX , int * pnY , int * pnBits , int * pnPitch ); 
%fcns.thunkname{fcnNum}='int32uint32cstringint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='is_InquireImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_GetImageMemPitch ( HIDS hCam , INT * pPitch ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetImageMemPitch'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% INT is_SetAllocatedImageMem ( HIDS hCam , INT width , INT height , INT bitspixel , char * pcImgMem , int * pid ); 
fcns.thunkname{fcnNum}='int32uint32int32int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='is_SetAllocatedImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'int32', 'int8Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_CopyImageMem ( HIDS hCam , char * pcSource , int nID , char * pcDest ); 
%fcns.thunkname{fcnNum}='int32uint32cstringint32cstringThunk';fcns.name{fcnNum}='is_CopyImageMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
%% INT is_CopyImageMemLines ( HIDS hCam , char * pcSource , int nID , int nLines , char * pcDest ); 
%fcns.thunkname{fcnNum}='int32uint32cstringint32int32cstringThunk';fcns.name{fcnNum}='is_CopyImageMemLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
%% INT is_AddToSequence ( HIDS hCam , char * pcMem , INT nID ); 
%fcns.thunkname{fcnNum}='int32uint32cstringint32Thunk';fcns.name{fcnNum}='is_AddToSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%% INT is_ClearSequence ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_ClearSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_GetActSeqBuf ( HIDS hCam , INT * pnNum , char ** ppcMem , char ** ppcMemLast ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetActSeqBuf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr', 'stringPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%% INT is_LockSeqBuf ( HIDS hCam , INT nNum , char * pcMem ); 
%fcns.thunkname{fcnNum}='int32uint32int32cstringThunk';fcns.name{fcnNum}='is_LockSeqBuf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'cstring'};fcnNum=fcnNum+1;
%% INT is_UnlockSeqBuf ( HIDS hCam , INT nNum , char * pcMem ); 
%fcns.thunkname{fcnNum}='int32uint32int32cstringThunk';fcns.name{fcnNum}='is_UnlockSeqBuf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'cstring'};fcnNum=fcnNum+1;
%% INT is_GetError ( HIDS hCam , INT * pErr , IS_CHAR ** ppcErr ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr', 'int8PtrPtr'};fcnNum=fcnNum+1;
%% INT is_SetErrorReport ( HIDS hCam , INT Mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetErrorReport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_ReadEEPROM ( HIDS hCam , INT Adr , char * pcString , INT Count ); 
%fcns.thunkname{fcnNum}='int32uint32int32cstringint32Thunk';fcns.name{fcnNum}='is_ReadEEPROM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%% INT is_WriteEEPROM ( HIDS hCam , INT Adr , char * pcString , INT Count ); 
%fcns.thunkname{fcnNum}='int32uint32int32cstringint32Thunk';fcns.name{fcnNum}='is_WriteEEPROM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% INT is_SetColorMode ( HIDS hCam , INT Mode ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetColorMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetColorDepth ( HIDS hCam , INT * pnCol , INT * pnColMode ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetColorDepth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_RenderBitmap ( HIDS hCam , INT nMemID , HWND hwnd , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrint32Thunk';fcns.name{fcnNum}='is_RenderBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetDisplayMode ( HIDS hCam , INT Mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetDisplayMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetDisplayPos ( HIDS hCam , INT x , INT y ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_SetDisplayPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetHwnd ( HIDS hCam , HWND hwnd ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_SetHwnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'voidPtr'};fcnNum=fcnNum+1;
%% INT is_GetVsyncCount ( HIDS hCam , long * pIntr , long * pActIntr ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetVsyncCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%% INT is_GetDLLVersion ( void ); 
%fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='is_GetDLLVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%% INT is_InitEvent ( HIDS hCam , HANDLE hEv , INT which ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='is_InitEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_ExitEvent ( HIDS hCam , INT which ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_ExitEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_EnableEvent ( HIDS hCam , INT which ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_EnableEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_DisableEvent ( HIDS hCam , INT which ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_DisableEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
% INT is_SetExternalTrigger ( HIDS hCam , INT nTriggerMode ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetExternalTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetTriggerCounter ( HIDS hCam , INT nValue ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetTriggerCounter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetRopEffect ( HIDS hCam , INT effect , INT param , INT reserved ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32int32Thunk';fcns.name{fcnNum}='is_SetRopEffect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% INT is_InitCamera ( HIDS * phCam , HWND hWnd ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_InitCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% INT is_ExitCamera ( HIDS hCam ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_ExitCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_GetCameraInfo ( HIDS hCam , PBOARDINFO pInfo ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetCameraInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'BOARDINFOPtr'};fcnNum=fcnNum+1;
%% ULONG is_CameraStatus ( HIDS hCam , INT nInfo , ULONG ulValue ); 
%fcns.thunkname{fcnNum}='uint32uint32int32uint32Thunk';fcns.name{fcnNum}='is_CameraStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'uint32'};fcnNum=fcnNum+1;
%% INT is_GetCameraType ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_GetCameraType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_GetNumberOfCameras ( INT * pnNumCams ); 
%fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='is_GetNumberOfCameras'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_GetUsedBandwidth ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_GetUsedBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_GetFrameTimeRange ( HIDS hCam , double * min , double * max , double * intervall ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetFrameTimeRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_SetFrameRate ( HIDS hCam , double FPS , double * newFPS ); 
%fcns.thunkname{fcnNum}='int32uint32doublevoidPtrThunk';fcns.name{fcnNum}='is_SetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'double', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_GetFramesPerSecond ( HIDS hCam , double * dblFPS ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetFramesPerSecond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_GetSensorInfo ( HIDS hCam , PSENSORINFO pInfo ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetSensorInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_SENSORINFOPtr'};fcnNum=fcnNum+1;
%% INT is_GetRevisionInfo ( HIDS hCam , PREVISIONINFO prevInfo ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetRevisionInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_REVISIONINFOPtr'};fcnNum=fcnNum+1;
%% INT is_EnableAutoExit ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_EnableAutoExit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_EnableMessage ( HIDS hCam , INT which , HWND hWnd ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrThunk';fcns.name{fcnNum}='is_EnableMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
%% INT is_SetHardwareGain ( HIDS hCam , INT nMaster , INT nRed , INT nGreen , INT nBlue ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32int32int32Thunk';fcns.name{fcnNum}='is_SetHardwareGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetWhiteBalance ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetWhiteBalance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetWhiteBalanceMultipliers ( HIDS hCam , double dblRed , double dblGreen , double dblBlue ); 
%fcns.thunkname{fcnNum}='int32uint32doubledoubledoubleThunk';fcns.name{fcnNum}='is_SetWhiteBalanceMultipliers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'double', 'double', 'double'};fcnNum=fcnNum+1;
%% INT is_GetWhiteBalanceMultipliers ( HIDS hCam , double * pdblRed , double * pdblGreen , double * pdblBlue ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetWhiteBalanceMultipliers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_SetColorCorrection ( HIDS hCam , INT nEnable , double * factors ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrThunk';fcns.name{fcnNum}='is_SetColorCorrection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_SetSubSampling ( HIDS hCam , INT mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetSubSampling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_ForceTrigger ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_ForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_GetBusSpeed ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_GetBusSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_SetBinning ( HIDS hCam , INT mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetBinning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_ResetToDefault ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_ResetToDefault'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_SetCameraID ( HIDS hCam , INT nID ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetCameraID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetBayerConversion ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetBayerConversion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetHardwareGamma ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetHardwareGamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetCameraList ( PUEYE_CAMERA_LIST pucl ); 
%fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='is_GetCameraList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_UEYE_CAMERA_LISTPtr'};fcnNum=fcnNum+1;
%% INT is_SetAutoParameter ( HIDS hCam , INT param , double * pval1 , double * pval2 ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_SetAutoParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_GetAutoInfo ( HIDS hCam , UEYE_AUTO_INFO * pInfo ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetAutoInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_UEYE_AUTO_INFOPtr'};fcnNum=fcnNum+1;
%% INT is_GetImageHistogram ( HIDS hCam , int nID , INT ColorMode , DWORD * pHistoMem ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32voidPtrThunk';fcns.name{fcnNum}='is_GetImageHistogram'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
%% INT is_SetTriggerDelay ( HIDS hCam , INT nTriggerDelay ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetGainBoost ( HIDS hCam , INT mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetGainBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetGlobalShutter ( HIDS hCam , INT mode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_SetGlobalShutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetExtendedRegister ( HIDS hCam , INT index , WORD value ); 
%fcns.thunkname{fcnNum}='int32uint32int32uint16Thunk';fcns.name{fcnNum}='is_SetExtendedRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'uint16'};fcnNum=fcnNum+1;
%% INT is_GetExtendedRegister ( HIDS hCam , INT index , WORD * pwValue ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrThunk';fcns.name{fcnNum}='is_GetExtendedRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
%% INT is_SetHWGainFactor ( HIDS hCam , INT nMode , INT nFactor ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_SetHWGainFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_Renumerate ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_Renumerate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_WriteI2C ( HIDS hCam , INT nDeviceAddr , INT nRegisterAddr , BYTE * pbData , INT nLen ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32voidPtrint32Thunk';fcns.name{fcnNum}='is_WriteI2C'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%% INT is_ReadI2C ( HIDS hCam , INT nDeviceAddr , INT nRegisterAddr , BYTE * pbData , INT nLen ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32voidPtrint32Thunk';fcns.name{fcnNum}='is_ReadI2C'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetHdrMode ( HIDS hCam , INT * Mode ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetHdrMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_EnableHdr ( HIDS hCam , INT Enable ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_EnableHdr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetHdrKneepoints ( HIDS hCam , KNEEPOINTARRAY * KneepointArray , INT KneepointArraySize ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='is_SetHdrKneepoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_KNEEPOINTARRAYPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetHdrKneepoints ( HIDS hCam , KNEEPOINTARRAY * KneepointArray , INT KneepointArraySize ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='is_GetHdrKneepoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_KNEEPOINTARRAYPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetHdrKneepointInfo ( HIDS hCam , KNEEPOINTINFO * KneepointInfo , INT KneepointInfoSize ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='is_GetHdrKneepointInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_KNEEPOINTINFOPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetOptimalCameraTiming ( HIDS hCam , INT Mode , INT Timeout , INT * pMaxPxlClk , double * pMaxFrameRate ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_SetOptimalCameraTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
%% INT is_GetSupportedTestImages ( HIDS hCam , INT * SupportedTestImages ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetSupportedTestImages'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_GetTestImageValueRange ( HIDS hCam , INT TestImage , INT * TestImageValueMin , INT * TestImageValueMax ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetTestImageValueRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_SetSensorTestImage ( HIDS hCam , INT Param1 , INT Param2 ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_SetSensorTestImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_GetColorConverter ( HIDS hCam , INT ColorMode , INT * pCurrentConvertMode , INT * pDefaultConvertMode , INT * pSupportedConvertModes ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='is_GetColorConverter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_SetColorConverter ( HIDS hCam , INT ColorMode , INT ConvertMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32int32Thunk';fcns.name{fcnNum}='is_SetColorConverter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%% INT is_WaitForNextImage ( HIDS hCam , UINT timeout , char ** ppcMem , INT * imageID ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='is_WaitForNextImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_InitImageQueue ( HIDS hCam , INT nMode ); 
%fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='is_InitImageQueue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%% INT is_ExitImageQueue ( HIDS hCam ); 
%fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='is_ExitImageQueue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%% INT is_SetTimeout ( HIDS hCam , UINT nMode , UINT Timeout ); 
%fcns.thunkname{fcnNum}='int32uint32uint32uint32Thunk';fcns.name{fcnNum}='is_SetTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%% INT is_GetTimeout ( HIDS hCam , UINT nMode , UINT * pTimeout ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%% INT is_GetDuration ( HIDS hCam , UINT nMode , INT * pnTime ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetDuration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
%% INT is_GetSensorScalerInfo ( HIDS hCam , SENSORSCALERINFO * pSensorScalerInfo , INT nSensorScalerInfoSize ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='is_GetSensorScalerInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_SENSORSCALERINFOPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_SetSensorScaler ( HIDS hCam , UINT nMode , double dblFactor ); 
%fcns.thunkname{fcnNum}='int32uint32uint32doubleThunk';fcns.name{fcnNum}='is_SetSensorScaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
%% INT is_GetImageInfo ( HIDS hCam , INT nImageBufferID , UEYEIMAGEINFO * pImageInfo , INT nImageInfoSize ); 
%fcns.thunkname{fcnNum}='int32uint32int32voidPtrint32Thunk';fcns.name{fcnNum}='is_GetImageInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32', 's_UEYEIMAGEINFOPtr', 'int32'};fcnNum=fcnNum+1;
%% INT is_ImageFormat ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ImageFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_FaceDetection ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_FaceDetection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Focus ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Focus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ImageStabilization ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ImageStabilization'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ScenePreset ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ScenePreset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Zoom ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Zoom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Sharpness ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Sharpness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Saturation ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Saturation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_TriggerDebounce ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_TriggerDebounce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ColorTemperature ( HIDS hCam , UINT nCommand , void * pParam , UINT nSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ColorTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_DirectRenderer ( HIDS hCam , UINT nMode , void * pParam , UINT SizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_DirectRenderer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_HotPixel ( HIDS hCam , UINT nMode , void * pParam , UINT SizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_HotPixel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_AOI ( HIDS hCam , UINT nCommand , void * pParam , UINT SizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_AOI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Transfer ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Transfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_BootBoost ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_BootBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_DeviceFeature ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_DeviceFeature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Exposure ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Exposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Trigger ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Trigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_DeviceInfo ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_DeviceInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Callback ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Callback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_OptimalCameraTiming ( HIDS hCam , UINT u32Command , void * pParam , UINT u32SizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_OptimalCameraTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_SetStarterFirmware ( HIDS hCam , const CHAR * pcFilepath , UINT uFilepathLen ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_SetStarterFirmware'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_SetPacketFilter ( INT iAdapterID , UINT uFilterSetting ); 
%fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='is_SetPacketFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
%% INT is_GetComportNumber ( HIDS hCam , UINT * pComportNumber ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='is_GetComportNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%% INT is_IpConfig ( INT iID , UEYE_ETH_ADDR_MAC mac , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32int32UEYE_ETH_ADDR_MACuint32voidPtruint32Thunk';fcns.name{fcnNum}='is_IpConfig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_UEYE_ETH_ADDR_MAC', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Configuration ( UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Configuration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_IO ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_IO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_AutoParameter ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_AutoParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Convert ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Convert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ParameterSet ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ParameterSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_EdgeEnhancement ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_EdgeEnhancement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_PixelClock ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_PixelClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ImageFile ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ImageFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Blacklevel ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Blacklevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_ImageBuffer ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_ImageBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Measure ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Measure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_LUT ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParams ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_LUT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Gamma ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParams ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Gamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Memory ( HIDS hf , UINT nCommand , void * pParam , UINT cbSizeOfParam ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Memory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%% INT is_Multicast ( HIDS hCam , UINT nCommand , void * pParam , UINT cbSizeOfParams ); 
%fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='is_Multicast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%structs.BOARDINFO.packing=8;
%structs.BOARDINFO.members=struct('SerNo', 'int8#12', 'ID', 'int8#20', 'Version', 'int8#10', 'Date', 'int8#12', 'Select', 'uint8', 'Type', 'uint8', 'Reserved', 'int8#8');
%structs.s_SENSORINFO.packing=8;
%structs.s_SENSORINFO.members=struct('SensorID', 'uint16', 'strSensorName', 'int8#32', 'nColorMode', 'int8', 'nMaxWidth', 'uint32', 'nMaxHeight', 'uint32', 'bMasterGain', 'int32', 'bRGain', 'int32', 'bGGain', 'int32', 'bBGain', 'int32', 'bGlobShutter', 'int32', 'wPixelSize', 'uint16', 'nUpperLeftBayerPixel', 'int8', 'Reserved', 'int8#13');
%structs.s_REVISIONINFO.packing=8;
%structs.s_REVISIONINFO.members=struct('size', 'uint16', 'Sensor', 'uint16', 'Cypress', 'uint16', 'Blackfin', 'uint32', 'DspFirmware', 'uint16', 'USB_Board', 'uint16', 'Sensor_Board', 'uint16', 'Processing_Board', 'uint16', 'Memory_Board', 'uint16', 'Housing', 'uint16', 'Filter', 'uint16', 'Timing_Board', 'uint16', 'Product', 'uint16', 'Power_Board', 'uint16', 'Logic_Board', 'uint16', 'FX3', 'uint16', 'FPGA', 'uint16', 'reserved', 'uint8#92');
%structs.s_UEYE_CAPTURE_STATUS_INFO.packing=8;
%structs.s_UEYE_CAPTURE_STATUS_INFO.members=struct('dwCapStatusCnt_Total', 'uint32', 'reserved', 'uint8#60', 'adwCapStatusCnt_Detail', 'uint32#256');
%structs.s_UEYE_CAMERA_INFO.packing=8;
%structs.s_UEYE_CAMERA_INFO.members=struct('dwCameraID', 'uint32', 'dwDeviceID', 'uint32', 'dwSensorID', 'uint32', 'dwInUse', 'uint32', 'SerNo', 'int8#16', 'Model', 'int8#16', 'dwStatus', 'uint32', 'dwReserved', 'uint32#2', 'FullModelName', 'int8#32', 'dwReserved2', 'uint32#5');
%structs.s_UEYE_CAMERA_LIST.packing=8;
%structs.s_UEYE_CAMERA_LIST.members=struct('dwCount', 'uint32', 'uci', 's_UEYE_CAMERA_INFO#1');
%structs.s_AUTO_BRIGHT_STATUS.packing=8;
%structs.s_AUTO_BRIGHT_STATUS.members=struct('curValue', 'uint32', 'curError', 'long', 'curController', 'uint32', 'curCtrlStatus', 'uint32');
%structs.s_AUTO_WB_CHANNNEL_STATUS.packing=8;
%structs.s_AUTO_WB_CHANNNEL_STATUS.members=struct('curValue', 'uint32', 'curError', 'long', 'curCtrlStatus', 'uint32');
%structs.s_AUTO_WB_STATUS.packing=8;
%structs.s_AUTO_WB_STATUS.members=struct('RedChannel', 's_AUTO_WB_CHANNNEL_STATUS', 'GreenChannel', 's_AUTO_WB_CHANNNEL_STATUS', 'BlueChannel', 's_AUTO_WB_CHANNNEL_STATUS', 'curController', 'uint32');
%structs.s_UEYE_AUTO_INFO.packing=8;
%structs.s_UEYE_AUTO_INFO.members=struct('AutoAbility', 'uint32', 'sBrightCtrlStatus', 's_AUTO_BRIGHT_STATUS', 'sWBCtrlStatus', 's_AUTO_WB_STATUS', 'AShutterPhotomCaps', 'uint32', 'AGainPhotomCaps', 'uint32', 'AAntiFlickerCaps', 'uint32', 'SensorWBModeCaps', 'uint32', 'reserved', 'uint32#8');
%structs.s_DC_INFO.packing=8;
%structs.s_DC_INFO.members=struct('nSize', 'uint32', 'hDC', 'voidPtr', 'nCx', 'uint32', 'nCy', 'uint32');
%structs.s_KNEEPOINT.packing=8;
%structs.s_KNEEPOINT.members=struct('x', 'double', 'y', 'double');
%structs.s_KNEEPOINTARRAY.packing=8;
%structs.s_KNEEPOINTARRAY.members=struct('NumberOfUsedKneepoints', 'int32', 'Kneepoint', 's_KNEEPOINT#10');
%structs.s_KNEEPOINTINFO.packing=8;
%structs.s_KNEEPOINTINFO.members=struct('NumberOfSupportedKneepoints', 'int32', 'NumberOfUsedKneepoints', 'int32', 'MinValueX', 'double', 'MaxValueX', 'double', 'MinValueY', 'double', 'MaxValueY', 'double', 'DefaultKneepoint', 's_KNEEPOINT#10', 'Reserved', 'int32#10');
%structs.s_SENSORSCALERINFO.packing=8;
%structs.s_SENSORSCALERINFO.members=struct('nCurrMode', 'int32', 'nNumberOfSteps', 'int32', 'dblFactorIncrement', 'double', 'dblMinFactor', 'double', 'dblMaxFactor', 'double', 'dblCurrFactor', 'double', 'nSupportedModes', 'int32', 'bReserved', 'uint8#84');
%structs.s_UEYETIME.packing=8;
%structs.s_UEYETIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16', 'byReserved', 'uint8#10');
%structs.s_UEYEIMAGEINFO.packing=8;
%structs.s_UEYEIMAGEINFO.members=struct('dwFlags', 'uint32', 'byReserved1', 'uint8#4', 'u64TimestampDevice', 'ulong', 'TimestampSystem', 's_UEYETIME', 'dwIoStatus', 'uint32', 'wAOIIndex', 'uint16', 'wAOICycle', 'uint16', 'u64FrameNumber', 'ulong', 'dwImageBuffers', 'uint32', 'dwImageBuffersInUse', 'uint32', 'dwReserved3', 'uint32', 'dwImageHeight', 'uint32', 'dwImageWidth', 'uint32', 'dwHostProcessTime', 'uint32');
%structs.S_IMAGE_FORMAT_INFO.packing=8;
%structs.S_IMAGE_FORMAT_INFO.members=struct('nFormatID', 'int32', 'nWidth', 'uint32', 'nHeight', 'uint32', 'nX0', 'int32', 'nY0', 'int32', 'nSupportedCaptureModes', 'uint32', 'nBinningMode', 'uint32', 'nSubsamplingMode', 'uint32', 'strFormatName', 'int8#64', 'dSensorScalerFactor', 'double', 'nReserved', 'uint32#22');
%structs.S_IMAGE_FORMAT_LIST.packing=8;
%structs.S_IMAGE_FORMAT_LIST.members=struct('nSizeOfListEntry', 'uint32', 'nNumListElements', 'uint32', 'nReserved', 'uint32#4', 'FormatInfo', 'S_IMAGE_FORMAT_INFO#1');
%structs.S_FDT_INFO_EL.packing=8;
%structs.S_FDT_INFO_EL.members=struct('nFacePosX', 'int32', 'nFacePosY', 'int32', 'nFaceWidth', 'int32', 'nFaceHeight', 'int32', 'nAngle', 'int32', 'nPosture', 'uint32', 'TimestampSystem', 's_UEYETIME', 'nReserved', 'ulong', 'nReserved2', 'uint32#4');
%structs.S_FDT_INFO_LIST.packing=8;
%structs.S_FDT_INFO_LIST.members=struct('nSizeOfListEntry', 'uint32', 'nNumDetectedFaces', 'uint32', 'nNumListElements', 'uint32', 'nReserved', 'uint32#4', 'FaceEntry', 'S_FDT_INFO_EL#1');
%structs.s_OPENGL_DISPLAY.packing=8;
%structs.s_OPENGL_DISPLAY.members=struct('nWindowID', 'int32', 'pDisplay', 'voidPtr');
%structs.IS_POINT_2D.packing=8;
%structs.IS_POINT_2D.members=struct('s32X', 'int32', 's32Y', 'int32');
%structs.IS_SIZE_2D.packing=8;
%structs.IS_SIZE_2D.members=struct('s32Width', 'int32', 's32Height', 'int32');
%structs.IS_RECT.packing=8;
%structs.IS_RECT.members=struct('s32X', 'int32', 's32Y', 'int32', 's32Width', 'int32', 's32Height', 'int32');
%structs.AOI_SEQUENCE_PARAMS.packing=8;
%structs.AOI_SEQUENCE_PARAMS.members=struct('s32AOIIndex', 'int32', 's32NumberOfCycleRepetitions', 'int32', 's32X', 'int32', 's32Y', 'int32', 'dblExposure', 'double', 's32Gain', 'int32', 's32BinningMode', 'int32', 's32SubsamplingMode', 'int32', 's32DetachImageParameters', 'int32', 'dblScalerFactor', 'double', 'byReserved', 'uint8#64');
%structs.S_RANGE_OF_VALUES_U32.packing=8;
%structs.S_RANGE_OF_VALUES_U32.members=struct('u32Minimum', 'uint32', 'u32Maximum', 'uint32', 'u32Increment', 'uint32', 'u32Default', 'uint32', 'u32Infinite', 'uint32');
%structs.S_IS_BOOTBOOST_IDLIST.packing=8;
%structs.S_IS_BOOTBOOST_IDLIST.members=struct('u32NumberOfEntries', 'uint32', 'aList', 'uint8#1');
%structs.S_IS_TIMESTAMP_CONFIGURATION.packing=8;
%structs.S_IS_TIMESTAMP_CONFIGURATION.members=struct('s32Mode', 'int32', 's32Pin', 'int32', 's32Edge', 'int32');
%structs.S_IS_MULTI_INTEGRATION_CYCLES.packing=8;
%structs.S_IS_MULTI_INTEGRATION_CYCLES.members=struct('dblIntegration_ms', 'double', 'dblPause_ms', 'double');
%structs.S_IS_MULTI_INTEGRATION_SCOPE.packing=8;
%structs.S_IS_MULTI_INTEGRATION_SCOPE.members=struct('dblMinIntegration_ms', 'double', 'dblMaxIntegration_ms', 'double', 'dblIntegrationGranularity_ms', 'double', 'dblMinPause_ms', 'double', 'dblMaxPause_ms', 'double', 'dblPauseGranularity_ms', 'double', 'dblMinCycle_ms', 'double', 'dblMaxCycle_ms', 'double', 'dblCycleGranularity_ms', 'double', 'dblMinTriggerCycle_ms', 'double', 'dblMinTriggerDuration_ms', 'double', 'nMinNumberOfCycles', 'uint32', 'nMaxNumberOfCycles', 'uint32', 'm_bReserved', 'uint8#32');
%structs.S_IS_DEVICE_INFO_HEARTBEAT.packing=1;
%structs.S_IS_DEVICE_INFO_HEARTBEAT.members=struct('reserved_1', 'uint8#24', 'dwRuntimeFirmwareVersion', 'uint32', 'reserved_2', 'uint8#8', 'wTemperature', 'uint16', 'wLinkSpeed_Mb', 'uint16', 'reserved_3', 'uint8#6', 'wComportOffset', 'uint16', 'reserved', 'uint8#200');
%structs.S_IS_DEVICE_INFO_CONTROL.packing=1;
%structs.S_IS_DEVICE_INFO_CONTROL.members=struct('dwDeviceId', 'uint32', 'reserved', 'uint8#148');
%structs.S_IS_DEVICE_INFO.packing=1;
%structs.S_IS_DEVICE_INFO.members=struct('infoDevHeartbeat', 'S_IS_DEVICE_INFO_HEARTBEAT', 'infoDevControl', 'S_IS_DEVICE_INFO_CONTROL', 'reserved', 'uint8#240');
%structs.S_IS_CALLBACK_EVCTX_DATA_PROCESSING.packing=8;
%structs.S_IS_CALLBACK_EVCTX_DATA_PROCESSING.members=struct('pSrcBuf', 'voidPtr', 'cbSrcBuf', 'uint32', 'pDestBuf', 'voidPtr', 'cbDestBuf', 'uint32');
%structs.S_IS_CALLBACK_EVCTX_IMAGE_PROCESSING.packing=8;
%structs.S_IS_CALLBACK_EVCTX_IMAGE_PROCESSING.members=struct('bufferInfo', 'S_IS_CALLBACK_EVCTX_DATA_PROCESSING');
%structs.S_IS_CALLBACK_FDBK_IMAGE_PROCESSING.packing=8;
%structs.S_IS_CALLBACK_FDBK_IMAGE_PROCESSING.members=struct('nDummy', 'uint32');
%structs.S_IS_CALLBACK_INSTALLATION_DATA.packing=8;
%structs.S_IS_CALLBACK_INSTALLATION_DATA.members=struct('nEvent', 'uint32', 'pfFunc', 'FcnPtr', 'pUserContext', 'voidPtr', 'hCallback', 'uint32');
%structs.S_IS_OPTIMAL_CAMERA_TIMING.packing=8;
%structs.S_IS_OPTIMAL_CAMERA_TIMING.members=struct('s32Mode', 'int32', 's32TimeoutFineTuning', 'int32', 'ps32PixelClock', 'int32Ptr', 'pdFramerate', 'doublePtr');
%structs.s_UEYE_ETH_ADDR_MAC.packing=1;
%structs.s_UEYE_ETH_ADDR_MAC.members=struct('abyOctet', 'uint8#6');
%structs.s_UEYE_ETH_IP_CONFIGURATION.packing=1;
%structs.s_UEYE_ETH_IP_CONFIGURATION.members=struct('ipAddress', 'error', 'ipSubnetmask', 'error', 'reserved', 'uint8#4');
%structs.s_UEYE_ETH_DEVICE_INFO_HEARTBEAT.packing=1;
%structs.s_UEYE_ETH_DEVICE_INFO_HEARTBEAT.members=struct('abySerialNumber', 'uint8#12', 'byDeviceType', 'uint8', 'byCameraID', 'uint8', 'wSensorID', 'uint16', 'wSizeImgMem_MB', 'uint16', 'reserved_1', 'uint8#2', 'dwVerStarterFirmware', 'uint32', 'dwVerRuntimeFirmware', 'uint32', 'dwStatus', 'uint32', 'reserved_2', 'uint8#4', 'wTemperature', 'uint16', 'wLinkSpeed_Mb', 'uint16', 'macDevice', 's_UEYE_ETH_ADDR_MAC', 'wComportOffset', 'uint16', 'ipcfgPersistentIpCfg', 's_UEYE_ETH_IP_CONFIGURATION', 'ipcfgCurrentIpCfg', 's_UEYE_ETH_IP_CONFIGURATION', 'macPairedHost', 's_UEYE_ETH_ADDR_MAC', 'reserved_4', 'uint8#2', 'ipPairedHostIp', 'error', 'ipAutoCfgIpRangeBegin', 'error', 'ipAutoCfgIpRangeEnd', 'error', 'abyUserSpace', 'uint8#8', 'reserved_5', 'uint8#84', 'reserved_6', 'uint8#64');
%structs.s_UEYE_ETH_DEVICE_INFO_CONTROL.packing=1;
%structs.s_UEYE_ETH_DEVICE_INFO_CONTROL.members=struct('dwDeviceID', 'uint32', 'dwControlStatus', 'uint32', 'reserved_1', 'uint8#80', 'reserved_2', 'uint8#64');
%structs.s_UEYE_ETH_ETHERNET_CONFIGURATION.packing=1;
%structs.s_UEYE_ETH_ETHERNET_CONFIGURATION.members=struct('ipcfg', 's_UEYE_ETH_IP_CONFIGURATION', 'mac', 's_UEYE_ETH_ADDR_MAC');
%structs.s_UEYE_ETH_AUTOCFG_IP_SETUP.packing=1;
%structs.s_UEYE_ETH_AUTOCFG_IP_SETUP.members=struct('ipAutoCfgIpRangeBegin', 'error', 'ipAutoCfgIpRangeEnd', 'error', 'reserved', 'uint8#4');
%structs.s_UEYE_ETH_ADAPTER_INFO.packing=1;
%structs.s_UEYE_ETH_ADAPTER_INFO.members=struct('dwAdapterID', 'uint32', 'dwDeviceLinkspeed', 'uint32', 'ethcfg', 's_UEYE_ETH_ETHERNET_CONFIGURATION', 'reserved_2', 'uint8#2', 'bIsEnabledDHCP', 'int32', 'autoCfgIp', 's_UEYE_ETH_AUTOCFG_IP_SETUP', 'bIsValidAutoCfgIpRange', 'int32', 'dwCntDevicesKnown', 'uint32', 'dwCntDevicesPaired', 'uint32', 'wPacketFilter', 'uint16', 'reserved_3', 'uint8#38', 'reserved_4', 'uint8#64');
%structs.s_UEYE_ETH_DRIVER_INFO.packing=1;
%structs.s_UEYE_ETH_DRIVER_INFO.members=struct('dwMinVerStarterFirmware', 'uint32', 'dwMaxVerStarterFirmware', 'uint32', 'reserved_1', 'uint8#8', 'reserved_2', 'uint8#64');
%structs.s_UEYE_ETH_DEVICE_INFO.packing=1;
%structs.s_UEYE_ETH_DEVICE_INFO.members=struct('infoDevHeartbeat', 's_UEYE_ETH_DEVICE_INFO_HEARTBEAT', 'infoDevControl', 's_UEYE_ETH_DEVICE_INFO_CONTROL', 'infoAdapter', 's_UEYE_ETH_ADAPTER_INFO', 'infoDriver', 's_UEYE_ETH_DRIVER_INFO');
%structs.s_UEYE_COMPORT_CONFIGURATION.packing=1;
%structs.s_UEYE_COMPORT_CONFIGURATION.members=struct('wComportNumber', 'uint16');
%structs.S_IO_FLASH_PARAMS.packing=8;
%structs.S_IO_FLASH_PARAMS.members=struct('s32Delay', 'int32', 'u32Duration', 'uint32');
%structs.S_IO_PWM_PARAMS.packing=8;
%structs.S_IO_PWM_PARAMS.members=struct('dblFrequency_Hz', 'double', 'dblDutyCycle', 'double');
%structs.S_IO_GPIO_CONFIGURATION.packing=8;
%structs.S_IO_GPIO_CONFIGURATION.members=struct('u32Gpio', 'uint32', 'u32Caps', 'uint32', 'u32Configuration', 'uint32', 'u32State', 'uint32', 'u32Reserved', 'uint32#12');
%structs.BUFFER_CONVERSION_PARAMS.packing=8;
%structs.BUFFER_CONVERSION_PARAMS.members=struct('pSourceBuffer', 'cstring', 'pDestBuffer', 'cstring', 'nDestPixelFormat', 'int32', 'nDestPixelConverter', 'int32', 'nDestGamma', 'int32', 'nDestEdgeEnhancement', 'int32', 'nDestColorCorrectionMode', 'int32', 'nDestSaturationU', 'int32', 'nDestSaturationV', 'int32', 'reserved', 'uint8#32');
%structs.IMAGE_FILE_PARAMS.packing=8;
%structs.IMAGE_FILE_PARAMS.members=struct('pwchFileName', 'int32Ptr', 'nFileType', 'uint32', 'nQuality', 'uint32', 'ppcImageMem', 'stringPtrPtr', 'pnImageID', 'uint32Ptr', 'reserved', 'uint8#32');
%structs.S_IS_RANGE_S32.packing=8;
%structs.S_IS_RANGE_S32.members=struct('s32Min', 'int32', 's32Max', 'int32', 's32Inc', 'int32');
%structs.S_IS_RANGE_F64.packing=8;
%structs.S_IS_RANGE_F64.members=struct('f64Min', 'double', 'f64Max', 'double', 'f64Inc', 'double');
%structs.S_ID_RANGE.packing=8;
%structs.S_ID_RANGE.members=struct('s32First', 'int32', 's32Last', 'int32');
%structs.S_IMGBUF_ITERATION_INFO.packing=8;
%structs.S_IMGBUF_ITERATION_INFO.members=struct('u32IterationID', 'uint32', 'rangeImageID', 'S_ID_RANGE', 'bReserved', 'uint8#52');
%structs.S_IMGBUF_ITEM.packing=8;
%structs.S_IMGBUF_ITEM.members=struct('u32IterationID', 'uint32', 's32ImageID', 'int32');
%structs.S_MEASURE_SHARPNESS_AOI_INFO.packing=8;
%structs.S_MEASURE_SHARPNESS_AOI_INFO.members=struct('u32NumberAOI', 'uint32', 'u32SharpnessValue', 'uint32', 'rcAOI', 'IS_RECT');
%structs.IS_LUT_CONFIGURATION_64.packing=8;
%structs.IS_LUT_CONFIGURATION_64.members=struct('dblValues', 'double#192', 'bAllChannelsAreEqual', 'int32');
%structs.IS_LUT_CONFIGURATION_PRESET_64.packing=8;
%structs.IS_LUT_CONFIGURATION_PRESET_64.members=struct('predefinedLutID', 'int32', 'lutConfiguration', 'IS_LUT_CONFIGURATION_64');
%structs.IS_LUT_STATE.packing=8;
%structs.IS_LUT_STATE.members=struct('bLUTEnabled', 'int32', 'nLUTStateID', 'int32', 'nLUTModeID', 'int32', 'nLUTBits', 'int32');
%structs.IS_LUT_SUPPORT_INFO.packing=8;
%structs.IS_LUT_SUPPORT_INFO.members=struct('bSupportLUTHardware', 'int32', 'bSupportLUTSoftware', 'int32', 'nBitsHardware', 'int32', 'nBitsSoftware', 'int32', 'nChannelsHardware', 'int32', 'nChannelsSoftware', 'int32');
%structs.IS_MEMORY_ACCESS.packing=8;
%structs.IS_MEMORY_ACCESS.members=struct('u32Description', 'uint32', 'u32Offset', 'uint32', 'pu8Data', 'uint8Ptr', 'u32SizeOfData', 'uint32');
%structs.IS_MEMORY_SIZE.packing=8;
%structs.IS_MEMORY_SIZE.members=struct('u32Description', 'uint32', 'u32SizeBytes', 'uint32');
%structs.IS_MULTI_AOI_DESCRIPTOR.packing=8;
%structs.IS_MULTI_AOI_DESCRIPTOR.members=struct('nPosX', 'uint32', 'nPosY', 'uint32', 'nWidth', 'uint32', 'nHeight', 'uint32', 'nStatus', 'uint32');
%structs.IS_MULTI_AOI_CONTAINER.packing=8;
%structs.IS_MULTI_AOI_CONTAINER.members=struct('nNumberOfAOIs', 'uint32', 'pMultiAOIList', 'IS_MULTI_AOI_DESCRIPTORPtr');
%structs.IS_PMC_READONLYDEVICEDESCRIPTOR.packing=8;
%structs.IS_PMC_READONLYDEVICEDESCRIPTOR.members=struct('ipCamera', 'error', 'ipMulticast', 'error', 'u32CameraId', 'uint32', 'u32ErrorHandlingMode', 'uint32');
%enuminfo.E_FDT_CMD=struct('FDT_CMD_GET_CAPABILITIES',0,'FDT_CMD_SET_DISABLE',1,'FDT_CMD_SET_ENABLE',2,'FDT_CMD_SET_SEARCH_ANGLE',3,'FDT_CMD_GET_SEARCH_ANGLE',4,'FDT_CMD_SET_SEARCH_ANGLE_ENABLE',5,'FDT_CMD_SET_SEARCH_ANGLE_DISABLE',6,'FDT_CMD_GET_SEARCH_ANGLE_ENABLE',7,'FDT_CMD_SET_SEARCH_AOI',8,'FDT_CMD_GET_SEARCH_AOI',9,'FDT_CMD_GET_FACE_LIST',10,'FDT_CMD_GET_NUMBER_FACES',11,'FDT_CMD_SET_SUSPEND',12,'FDT_CMD_SET_RESUME',13,'FDT_CMD_GET_MAX_NUM_FACES',14,'FDT_CMD_SET_INFO_MAX_NUM_OVL',15,'FDT_CMD_GET_INFO_MAX_NUM_OVL',16,'FDT_CMD_SET_INFO_OVL_LINE_WIDTH',17,'FDT_CMD_GET_INFO_OVL_LINE_WIDTH',18,'FDT_CMD_GET_ENABLE',19,'FDT_CMD_GET_SUSPEND',20,'FDT_CMD_GET_HORIZONTAL_RESOLUTION',21,'FDT_CMD_GET_VERTICAL_RESOLUTION',22);
%enuminfo.S_IS_EXTENDED_PIXELCLOCK_RANGE=struct('EXTENDED_PIXELCLOCK_RANGE_OFF',0,'EXTENDED_PIXELCLOCK_RANGE_ON',1);
%enuminfo.E_IMAGE_FILE_CMD=struct('IS_IMAGE_FILE_CMD_LOAD',1,'IS_IMAGE_FILE_CMD_SAVE',2);
%enuminfo.e_UEYE_ETH_DEVICESTATUS=struct('IS_ETH_DEVSTATUS_READY_TO_OPERATE',1,'IS_ETH_DEVSTATUS_TESTING_IP_CURRENT',2,'IS_ETH_DEVSTATUS_TESTING_IP_PERSISTENT',4,'IS_ETH_DEVSTATUS_TESTING_IP_RANGE',8,'IS_ETH_DEVSTATUS_INAPPLICABLE_IP_CURRENT',16,'IS_ETH_DEVSTATUS_INAPPLICABLE_IP_PERSISTENT',32,'IS_ETH_DEVSTATUS_INAPPLICABLE_IP_RANGE',64,'IS_ETH_DEVSTATUS_UNPAIRED',256,'IS_ETH_DEVSTATUS_PAIRING_IN_PROGRESS',512,'IS_ETH_DEVSTATUS_PAIRED',1024,'IS_ETH_DEVSTATUS_FORCE_100MBPS',4096,'IS_ETH_DEVSTATUS_NO_COMPORT',8192,'IS_ETH_DEVSTATUS_RECEIVING_FW_STARTER',65536,'IS_ETH_DEVSTATUS_RECEIVING_FW_RUNTIME',131072,'IS_ETH_DEVSTATUS_INAPPLICABLE_FW_RUNTIME',262144,'IS_ETH_DEVSTATUS_INAPPLICABLE_FW_STARTER',524288,'IS_ETH_DEVSTATUS_REBOOTING_FW_RUNTIME',1048576,'IS_ETH_DEVSTATUS_REBOOTING_FW_STARTER',2097152,'IS_ETH_DEVSTATUS_REBOOTING_FW_FAILSAFE',4194304,'IS_ETH_DEVSTATUS_RUNTIME_FW_ERR0',2147483648);
%enuminfo.E_TRANSFER_CMD=struct('TRANSFER_CMD_QUERY_CAPABILITIES',0,'TRANSFER_CMD_SET_IMAGEDELAY_US',1000,'TRANSFER_CMD_SET_PACKETINTERVAL_US',1005,'TRANSFER_CMD_GET_IMAGEDELAY_US',2000,'TRANSFER_CMD_GET_PACKETINTERVAL_US',2005,'TRANSFER_CMD_GETRANGE_IMAGEDELAY_US',3000,'TRANSFER_CMD_GETRANGE_PACKETINTERVAL_US',3005,'TRANSFER_CMD_SET_IMAGE_DESTINATION',5000,'TRANSFER_CMD_GET_IMAGE_DESTINATION',5001,'TRANSFER_CMD_GET_IMAGE_DESTINATION_CAPABILITIES',5002);
%enuminfo.E_BLACK_REFERENCE_MODES=struct('IS_BLACK_REFERENCE_MODE_OFF',0,'IS_BLACK_REFERENCE_MODE_COLUMNS_LEFT',1,'IS_BLACK_REFERENCE_MODE_ROWS_TOP',2);
%enuminfo.E_TIMESTAMP_CONFIGURATION_PIN=struct('TIMESTAMP_CONFIGURATION_PIN_NONE',0,'TIMESTAMP_CONFIGURATION_PIN_TRIGGER',1,'TIMESTAMP_CONFIGURATION_PIN_GPIO_1',2,'TIMESTAMP_CONFIGURATION_PIN_GPIO_2',3);
%enuminfo.E_EDGE_ENHANCEMENT_CMD=struct('IS_EDGE_ENHANCEMENT_CMD_GET_RANGE',1,'IS_EDGE_ENHANCEMENT_CMD_GET_DEFAULT',2,'IS_EDGE_ENHANCEMENT_CMD_GET',3,'IS_EDGE_ENHANCEMENT_CMD_SET',4);
%enuminfo.E_IS_OPTIMAL_CAMERA_TIMING_CMD=struct('IS_OPTIMAL_CAMERA_TIMING_CMD_GET_PIXELCLOCK',1,'IS_OPTIMAL_CAMERA_TIMING_CMD_GET_FRAMERATE',2);
%enuminfo.E_CONFIGURATION_CMD=struct('IS_CONFIG_CMD_GET_CAPABILITIES',1,'IS_CONFIG_CPU_IDLE_STATES_CMD_GET_ENABLE',2,'IS_CONFIG_CPU_IDLE_STATES_CMD_SET_DISABLE_ON_OPEN',4,'IS_CONFIG_CPU_IDLE_STATES_CMD_GET_DISABLE_ON_OPEN',5,'IS_CONFIG_OPEN_MP_CMD_GET_ENABLE',6,'IS_CONFIG_OPEN_MP_CMD_SET_ENABLE',7,'IS_CONFIG_OPEN_MP_CMD_GET_ENABLE_DEFAULT',8,'IS_CONFIG_INITIAL_PARAMETERSET_CMD_SET',9,'IS_CONFIG_INITIAL_PARAMETERSET_CMD_GET',10,'IS_CONFIG_ETH_CONFIGURATION_MODE_CMD_SET_ENABLE',11,'IS_CONFIG_ETH_CONFIGURATION_MODE_CMD_GET_ENABLE',12,'IS_CONFIG_IPO_CMD_GET_ALLOWED',13,'IS_CONFIG_IPO_CMD_SET_ALLOWED',14,'IS_CONFIG_CMD_TRUSTED_PAIRING_SET',15,'IS_CONFIG_CMD_TRUSTED_PAIRING_GET',16,'IS_CONFIG_CMD_TRUSTED_PAIRING_GET_DEFAULT',17);
%enuminfo.eUEYE_GET_ESTIMATED_TIME_MODE=struct('IS_SE_STARTER_FW_UPLOAD',1,'IS_CP_STARTER_FW_UPLOAD',2,'IS_STARTER_FW_UPLOAD',4);
%enuminfo.E_SHARPNESS_CAPABILITY_FLAGS=struct('SHARPNESS_CAP_INVALID',0,'SHARPNESS_CAP_SHARPNESS_SUPPORTED',1);
%enuminfo.E_BLACKLEVEL_MODES=struct('IS_AUTO_BLACKLEVEL_OFF',0,'IS_AUTO_BLACKLEVEL_ON',1);
%enuminfo.E_SENSOR_BIT_DEPTH=struct('IS_SENSOR_BIT_DEPTH_AUTO',0,'IS_SENSOR_BIT_DEPTH_8_BIT',1,'IS_SENSOR_BIT_DEPTH_10_BIT',2,'IS_SENSOR_BIT_DEPTH_12_BIT',4);
%enuminfo.E_CAPTURE_STATUS_CMD=struct('IS_CAPTURE_STATUS_INFO_CMD_RESET',1,'IS_CAPTURE_STATUS_INFO_CMD_GET',2);
%enuminfo.E_IMAGE_FORMAT_CMD=struct('IMGFRMT_CMD_GET_NUM_ENTRIES',1,'IMGFRMT_CMD_GET_LIST',2,'IMGFRMT_CMD_SET_FORMAT',3,'IMGFRMT_CMD_GET_ARBITRARY_AOI_SUPPORTED',4,'IMGFRMT_CMD_GET_FORMAT_INFO',5);
%enuminfo.E_TRANSFER_TARGET=struct('IS_TRANSFER_DESTINATION_DEVICE_MEMORY',1,'IS_TRANSFER_DESTINATION_USER_MEMORY',2);
%enuminfo.E_IS_CALLBACK_EVENT=struct('IS_CALLBACK_EV_IMGPOSTPROC_START',1);
%enuminfo.E_CAPTUREMODE=struct('CAPTMODE_FREERUN',1,'CAPTMODE_SINGLE',2,'CAPTMODE_TRIGGER_SOFT_SINGLE',16,'CAPTMODE_TRIGGER_SOFT_CONTINUOUS',32,'CAPTMODE_TRIGGER_HW_SINGLE',256,'CAPTMODE_TRIGGER_HW_CONTINUOUS',512);
%enuminfo.E_IS_MULTI_INTEGRATION_MODE=struct('MULTI_INTEGRATION_MODE_OFF',0,'MULTI_INTEGRATION_MODE_SOFTWARE',1,'MULTI_INTEGRATION_MODE_GPIO1',2,'MULTI_INTEGRATION_MODE_GPIO2',3);
%enuminfo.E_ANTI_FLICKER_MODE=struct('ANTIFLCK_MODE_OFF',0,'ANTIFLCK_MODE_SENS_AUTO',1,'ANTIFLCK_MODE_SENS_50_FIXED',2,'ANTIFLCK_MODE_SENS_60_FIXED',4);
%enuminfo.E_CONFIGURATION_CAPS=struct('IS_CONFIG_CPU_IDLE_STATES_CAP_SUPPORTED',1,'IS_CONFIG_OPEN_MP_CAP_SUPPORTED',2,'IS_CONFIG_INITIAL_PARAMETERSET_CAP_SUPPORTED',4,'IS_CONFIG_IPO_CAP_SUPPORTED',8,'IS_CONFIG_TRUSTED_PAIRING_CAP_SUPPORTED',16);
%enuminfo.e_UEYE_ETH_PACKETFILTER_SETUP=struct('IS_ETH_PCKTFLT_PASSALL',0,'IS_ETH_PCKTFLT_BLOCKUEGET',1,'IS_ETH_PCKTFLT_BLOCKALL',2);
%enuminfo.E_IPCONFIG_CMD=struct('IPCONFIG_CMD_QUERY_CAPABILITIES',0,'IPCONFIG_CMD_SET_PERSISTENT_IP',16842752,'IPCONFIG_CMD_SET_AUTOCONFIG_IP',17039360,'IPCONFIG_CMD_SET_AUTOCONFIG_IP_BYDEVICE',17039616,'IPCONFIG_CMD_RESERVED1',17301504,'IPCONFIG_CMD_GET_PERSISTENT_IP',33619968,'IPCONFIG_CMD_GET_AUTOCONFIG_IP',33816576,'IPCONFIG_CMD_GET_AUTOCONFIG_IP_BYDEVICE',33816832);
%enuminfo.E_DEVICE_FEATURE_CMD=struct('IS_DEVICE_FEATURE_CMD_GET_SUPPORTED_FEATURES',1,'IS_DEVICE_FEATURE_CMD_SET_LINESCAN_MODE',2,'IS_DEVICE_FEATURE_CMD_GET_LINESCAN_MODE',3,'IS_DEVICE_FEATURE_CMD_SET_LINESCAN_NUMBER',4,'IS_DEVICE_FEATURE_CMD_GET_LINESCAN_NUMBER',5,'IS_DEVICE_FEATURE_CMD_SET_SHUTTER_MODE',6,'IS_DEVICE_FEATURE_CMD_GET_SHUTTER_MODE',7,'IS_DEVICE_FEATURE_CMD_SET_PREFER_XS_HS_MODE',8,'IS_DEVICE_FEATURE_CMD_GET_PREFER_XS_HS_MODE',9,'IS_DEVICE_FEATURE_CMD_GET_DEFAULT_PREFER_XS_HS_MODE',10,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_DEFAULT',11,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE',12,'IS_DEVICE_FEATURE_CMD_SET_LOG_MODE',13,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_VALUE_DEFAULT',14,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_VALUE_RANGE',15,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_VALUE',16,'IS_DEVICE_FEATURE_CMD_SET_LOG_MODE_MANUAL_VALUE',17,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_GAIN_DEFAULT',18,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_GAIN_RANGE',19,'IS_DEVICE_FEATURE_CMD_GET_LOG_MODE_MANUAL_GAIN',20,'IS_DEVICE_FEATURE_CMD_SET_LOG_MODE_MANUAL_GAIN',21,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_MODE_DEFAULT',22,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_MODE',23,'IS_DEVICE_FEATURE_CMD_SET_VERTICAL_AOI_MERGE_MODE',24,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_POSITION_DEFAULT',25,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_POSITION_RANGE',26,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_POSITION',27,'IS_DEVICE_FEATURE_CMD_SET_VERTICAL_AOI_MERGE_POSITION',28,'IS_DEVICE_FEATURE_CMD_GET_FPN_CORRECTION_MODE_DEFAULT',29,'IS_DEVICE_FEATURE_CMD_GET_FPN_CORRECTION_MODE',30,'IS_DEVICE_FEATURE_CMD_SET_FPN_CORRECTION_MODE',31,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_SOURCE_GAIN_RANGE',32,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_SOURCE_GAIN_DEFAULT',33,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_SOURCE_GAIN',34,'IS_DEVICE_FEATURE_CMD_SET_SENSOR_SOURCE_GAIN',35,'IS_DEVICE_FEATURE_CMD_GET_BLACK_REFERENCE_MODE_DEFAULT',36,'IS_DEVICE_FEATURE_CMD_GET_BLACK_REFERENCE_MODE',37,'IS_DEVICE_FEATURE_CMD_SET_BLACK_REFERENCE_MODE',38,'IS_DEVICE_FEATURE_CMD_GET_ALLOW_RAW_WITH_LUT',39,'IS_DEVICE_FEATURE_CMD_SET_ALLOW_RAW_WITH_LUT',40,'IS_DEVICE_FEATURE_CMD_GET_SUPPORTED_SENSOR_BIT_DEPTHS',41,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_BIT_DEPTH_DEFAULT',42,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_BIT_DEPTH',43,'IS_DEVICE_FEATURE_CMD_SET_SENSOR_BIT_DEPTH',44,'IS_DEVICE_FEATURE_CMD_GET_TEMPERATURE',45,'IS_DEVICE_FEATURE_CMD_GET_JPEG_COMPRESSION',46,'IS_DEVICE_FEATURE_CMD_SET_JPEG_COMPRESSION',47,'IS_DEVICE_FEATURE_CMD_GET_JPEG_COMPRESSION_DEFAULT',48,'IS_DEVICE_FEATURE_CMD_GET_JPEG_COMPRESSION_RANGE',49,'IS_DEVICE_FEATURE_CMD_GET_NOISE_REDUCTION_MODE',50,'IS_DEVICE_FEATURE_CMD_SET_NOISE_REDUCTION_MODE',51,'IS_DEVICE_FEATURE_CMD_GET_NOISE_REDUCTION_MODE_DEFAULT',52,'IS_DEVICE_FEATURE_CMD_GET_TIMESTAMP_CONFIGURATION',53,'IS_DEVICE_FEATURE_CMD_SET_TIMESTAMP_CONFIGURATION',54,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_HEIGHT_DEFAULT',55,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_HEIGHT_NUMBER',56,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_HEIGHT_LIST',57,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_HEIGHT',58,'IS_DEVICE_FEATURE_CMD_SET_VERTICAL_AOI_MERGE_HEIGHT',59,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_ADDITIONAL_POSITION_DEFAULT',60,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_ADDITIONAL_POSITION_RANGE',61,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_ADDITIONAL_POSITION',62,'IS_DEVICE_FEATURE_CMD_SET_VERTICAL_AOI_MERGE_ADDITIONAL_POSITION',63,'IS_DEVICE_FEATURE_CMD_GET_SENSOR_TEMPERATURE_NUMERICAL_VALUE',64,'IS_DEVICE_FEATURE_CMD_SET_IMAGE_EFFECT',65,'IS_DEVICE_FEATURE_CMD_GET_IMAGE_EFFECT',66,'IS_DEVICE_FEATURE_CMD_GET_IMAGE_EFFECT_DEFAULT',67,'IS_DEVICE_FEATURE_CMD_GET_EXTENDED_PIXELCLOCK_RANGE_ENABLE_DEFAULT',68,'IS_DEVICE_FEATURE_CMD_GET_EXTENDED_PIXELCLOCK_RANGE_ENABLE',69,'IS_DEVICE_FEATURE_CMD_SET_EXTENDED_PIXELCLOCK_RANGE_ENABLE',70,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_GET_SCOPE',71,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_GET_PARAMS',72,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_SET_PARAMS',73,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_GET_MODE_DEFAULT',74,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_GET_MODE',75,'IS_DEVICE_FEATURE_CMD_MULTI_INTEGRATION_SET_MODE',76,'IS_DEVICE_FEATURE_CMD_SET_I2C_TARGET',77,'IS_DEVICE_FEATURE_CMD_SET_WIDE_DYNAMIC_RANGE_MODE',78,'IS_DEVICE_FEATURE_CMD_GET_WIDE_DYNAMIC_RANGE_MODE',79,'IS_DEVICE_FEATURE_CMD_GET_WIDE_DYNAMIC_RANGE_MODE_DEFAULT',80,'IS_DEVICE_FEATURE_CMD_GET_SUPPORTED_BLACK_REFERENCE_MODES',81,'IS_DEVICE_FEATURE_CMD_SET_LEVEL_CONTROLLED_TRIGGER_INPUT_MODE',82,'IS_DEVICE_FEATURE_CMD_GET_LEVEL_CONTROLLED_TRIGGER_INPUT_MODE',83,'IS_DEVICE_FEATURE_CMD_GET_LEVEL_CONTROLLED_TRIGGER_INPUT_MODE_DEFAULT',84,'IS_DEVICE_FEATURE_CMD_GET_VERTICAL_AOI_MERGE_MODE_SUPPORTED_LINE_MODES',85);
%enuminfo.E_IMGSTAB_CMD=struct('IMGSTAB_CMD_GET_CAPABILITIES',0,'IMGSTAB_CMD_SET_DISABLE',1,'IMGSTAB_CMD_SET_ENABLE',2,'IMGSTAB_CMD_GET_ENABLE',3);
%enuminfo.E_FOCUS_ZONE_AOI_PRESET=struct('FOC_ZONE_AOI_PRESET_CENTER',0,'FOC_ZONE_AOI_PRESET_UPPER_LEFT',1,'FOC_ZONE_AOI_PRESET_BOTTOM_LEFT',2,'FOC_ZONE_AOI_PRESET_UPPER_RIGHT',4,'FOC_ZONE_AOI_PRESET_BOTTOM_RIGHT',8,'FOC_ZONE_AOI_PRESET_UPPER_CENTER',16,'FOC_ZONE_AOI_PRESET_BOTTOM_CENTER',32,'FOC_ZONE_AOI_PRESET_CENTER_LEFT',64,'FOC_ZONE_AOI_PRESET_CENTER_RIGHT',128);
%enuminfo.E_PARAMETERSET_CMD=struct('IS_PARAMETERSET_CMD_LOAD_EEPROM',1,'IS_PARAMETERSET_CMD_LOAD_FILE',2,'IS_PARAMETERSET_CMD_SAVE_EEPROM',3,'IS_PARAMETERSET_CMD_SAVE_FILE',4,'IS_PARAMETERSET_CMD_GET_NUMBER_SUPPORTED',5,'IS_PARAMETERSET_CMD_GET_HW_PARAMETERSET_AVAILABLE',6,'IS_PARAMETERSET_CMD_ERASE_HW_PARAMETERSET',7);
%enuminfo.E_LENS_SHADING_MODELS=struct('LSC_MODEL_AGL',1,'LSC_MODEL_TL84',2,'LSC_MODEL_D50',4,'LSC_MODEL_D65',8);
%enuminfo.E_DEVICE_FEATURE_MODE_CAPS=struct('IS_DEVICE_FEATURE_CAP_SHUTTER_MODE_ROLLING',1,'IS_DEVICE_FEATURE_CAP_SHUTTER_MODE_GLOBAL',2,'IS_DEVICE_FEATURE_CAP_LINESCAN_MODE_FAST',4,'IS_DEVICE_FEATURE_CAP_LINESCAN_NUMBER',8,'IS_DEVICE_FEATURE_CAP_PREFER_XS_HS_MODE',16,'IS_DEVICE_FEATURE_CAP_LOG_MODE',32,'IS_DEVICE_FEATURE_CAP_SHUTTER_MODE_ROLLING_GLOBAL_START',64,'IS_DEVICE_FEATURE_CAP_SHUTTER_MODE_GLOBAL_ALTERNATIVE_TIMING',128,'IS_DEVICE_FEATURE_CAP_VERTICAL_AOI_MERGE',256,'IS_DEVICE_FEATURE_CAP_FPN_CORRECTION',512,'IS_DEVICE_FEATURE_CAP_SENSOR_SOURCE_GAIN',1024,'IS_DEVICE_FEATURE_CAP_BLACK_REFERENCE',2048,'IS_DEVICE_FEATURE_CAP_SENSOR_BIT_DEPTH',4096,'IS_DEVICE_FEATURE_CAP_TEMPERATURE',8192,'IS_DEVICE_FEATURE_CAP_JPEG_COMPRESSION',16384,'IS_DEVICE_FEATURE_CAP_NOISE_REDUCTION',32768,'IS_DEVICE_FEATURE_CAP_TIMESTAMP_CONFIGURATION',65536,'IS_DEVICE_FEATURE_CAP_IMAGE_EFFECT',131072,'IS_DEVICE_FEATURE_CAP_EXTENDED_PIXELCLOCK_RANGE',262144,'IS_DEVICE_FEATURE_CAP_MULTI_INTEGRATION',524288,'IS_DEVICE_FEATURE_CAP_WIDE_DYNAMIC_RANGE',1048576,'IS_DEVICE_FEATURE_CAP_LEVEL_CONTROLLED_TRIGGER',2097152);
%enuminfo.e_UEYE_ETH_LINKSPEED_SETUP=struct('IS_ETH_LINKSPEED_100MB',100,'IS_ETH_LINKSPEED_1000MB',1000);
%enuminfo.E_IO_CMD=struct('IS_IO_CMD_GPIOS_GET_SUPPORTED',1,'IS_IO_CMD_GPIOS_GET_SUPPORTED_INPUTS',2,'IS_IO_CMD_GPIOS_GET_SUPPORTED_OUTPUTS',3,'IS_IO_CMD_GPIOS_GET_DIRECTION',4,'IS_IO_CMD_GPIOS_SET_DIRECTION',5,'IS_IO_CMD_GPIOS_GET_STATE',6,'IS_IO_CMD_GPIOS_SET_STATE',7,'IS_IO_CMD_LED_GET_STATE',8,'IS_IO_CMD_LED_SET_STATE',9,'IS_IO_CMD_LED_TOGGLE_STATE',10,'IS_IO_CMD_FLASH_GET_GLOBAL_PARAMS',11,'IS_IO_CMD_FLASH_APPLY_GLOBAL_PARAMS',12,'IS_IO_CMD_FLASH_GET_SUPPORTED_GPIOS',13,'IS_IO_CMD_FLASH_GET_PARAMS_MIN',14,'IS_IO_CMD_FLASH_GET_PARAMS_MAX',15,'IS_IO_CMD_FLASH_GET_PARAMS_INC',16,'IS_IO_CMD_FLASH_GET_PARAMS',17,'IS_IO_CMD_FLASH_SET_PARAMS',18,'IS_IO_CMD_FLASH_GET_MODE',19,'IS_IO_CMD_FLASH_SET_MODE',20,'IS_IO_CMD_PWM_GET_SUPPORTED_GPIOS',21,'IS_IO_CMD_PWM_GET_PARAMS_MIN',22,'IS_IO_CMD_PWM_GET_PARAMS_MAX',23,'IS_IO_CMD_PWM_GET_PARAMS_INC',24,'IS_IO_CMD_PWM_GET_PARAMS',25,'IS_IO_CMD_PWM_SET_PARAMS',26,'IS_IO_CMD_PWM_GET_MODE',27,'IS_IO_CMD_PWM_SET_MODE',28,'IS_IO_CMD_GPIOS_GET_CONFIGURATION',29,'IS_IO_CMD_GPIOS_SET_CONFIGURATION',30,'IS_IO_CMD_FLASH_GET_GPIO_PARAMS_MIN',31,'IS_IO_CMD_FLASH_SET_GPIO_PARAMS',32,'IS_IO_CMD_FLASH_GET_AUTO_FREERUN_DEFAULT',33,'IS_IO_CMD_FLASH_GET_AUTO_FREERUN',34,'IS_IO_CMD_FLASH_SET_AUTO_FREERUN',35);
%enuminfo.E_CONVERT_CMD=struct('IS_CONVERT_CMD_APPLY_PARAMS_AND_CONVERT_BUFFER',1);
%enuminfo.E_AUTO_GAIN_PHOTOM=struct('AG_PM_NONE',0,'AG_PM_SENS_CENTER_WEIGHTED',1,'AG_PM_SENS_CENTER_SPOT',2,'AG_PM_SENS_PORTRAIT',4,'AG_PM_SENS_LANDSCAPE',8);
%enuminfo.E_FOCUS_CMD=struct('FOC_CMD_GET_CAPABILITIES',0,'FOC_CMD_SET_DISABLE_AUTOFOCUS',1,'FOC_CMD_SET_ENABLE_AUTOFOCUS',2,'FOC_CMD_GET_AUTOFOCUS_ENABLE',3,'FOC_CMD_SET_AUTOFOCUS_RANGE',4,'FOC_CMD_GET_AUTOFOCUS_RANGE',5,'FOC_CMD_GET_DISTANCE',6,'FOC_CMD_SET_MANUAL_FOCUS',7,'FOC_CMD_GET_MANUAL_FOCUS',8,'FOC_CMD_GET_MANUAL_FOCUS_MIN',9,'FOC_CMD_GET_MANUAL_FOCUS_MAX',10,'FOC_CMD_GET_MANUAL_FOCUS_INC',11,'FOC_CMD_SET_ENABLE_AF_FDT_AOI',12,'FOC_CMD_SET_DISABLE_AF_FDT_AOI',13,'FOC_CMD_GET_AF_FDT_AOI_ENABLE',14,'FOC_CMD_SET_ENABLE_AUTOFOCUS_ONCE',15,'FOC_CMD_GET_AUTOFOCUS_STATUS',16,'FOC_CMD_SET_AUTOFOCUS_ZONE_AOI',17,'FOC_CMD_GET_AUTOFOCUS_ZONE_AOI',18,'FOC_CMD_GET_AUTOFOCUS_ZONE_AOI_DEFAULT',19,'FOC_CMD_GET_AUTOFOCUS_ZONE_POS_MIN',20,'FOC_CMD_GET_AUTOFOCUS_ZONE_POS_MAX',21,'FOC_CMD_GET_AUTOFOCUS_ZONE_POS_INC',22,'FOC_CMD_GET_AUTOFOCUS_ZONE_SIZE_MIN',23,'FOC_CMD_GET_AUTOFOCUS_ZONE_SIZE_MAX',24,'FOC_CMD_GET_AUTOFOCUS_ZONE_SIZE_INC',25,'FOC_CMD_SET_AUTOFOCUS_ZONE_WEIGHT',26,'FOC_CMD_GET_AUTOFOCUS_ZONE_WEIGHT',27,'FOC_CMD_GET_AUTOFOCUS_ZONE_WEIGHT_COUNT',28,'FOC_CMD_GET_AUTOFOCUS_ZONE_WEIGHT_DEFAULT',29,'FOC_CMD_SET_AUTOFOCUS_ZONE_AOI_PRESET',30,'FOC_CMD_GET_AUTOFOCUS_ZONE_AOI_PRESET',31,'FOC_CMD_GET_AUTOFOCUS_ZONE_AOI_PRESET_DEFAULT',32,'FOC_CMD_GET_AUTOFOCUS_ZONE_ARBITRARY_AOI_SUPPORTED',33);
%enuminfo.E_IMGBUF_CMD=struct('IS_IMGBUF_DEVMEM_CMD_GET_AVAILABLE_ITERATIONS',1,'IS_IMGBUF_DEVMEM_CMD_GET_ITERATION_INFO',2,'IS_IMGBUF_DEVMEM_CMD_TRANSFER_IMAGE',3,'IS_IMGBUF_DEVMEM_CMD_RELEASE_ITERATIONS',4);
%enuminfo.E_SATURATION_CAPABILITY_FLAGS=struct('SATURATION_CAP_INVALID',0,'SATURATION_CAP_SATURATION_SUPPORTED',1);
%enuminfo.e_UEYE_CAPTURE_STATUS=struct('IS_CAP_STATUS_API_NO_DEST_MEM',162,'IS_CAP_STATUS_API_CONVERSION_FAILED',163,'IS_CAP_STATUS_API_IMAGE_LOCKED',165,'IS_CAP_STATUS_DRV_OUT_OF_BUFFERS',178,'IS_CAP_STATUS_DRV_DEVICE_NOT_READY',180,'IS_CAP_STATUS_USB_TRANSFER_FAILED',199,'IS_CAP_STATUS_DEV_TIMEOUT',214,'IS_CAP_STATUS_ETH_BUFFER_OVERRUN',228,'IS_CAP_STATUS_ETH_MISSED_IMAGES',229);
%enuminfo.E_AUTO_SHUTTER_PHOTOM=struct('AS_PM_NONE',0,'AS_PM_SENS_CENTER_WEIGHTED',1,'AS_PM_SENS_CENTER_SPOT',2,'AS_PM_SENS_PORTRAIT',4,'AS_PM_SENS_LANDSCAPE',8,'AS_PM_SENS_CENTER_AVERAGE',16);
%enuminfo.E_PIXELCLOCK_CMD=struct('IS_PIXELCLOCK_CMD_GET_NUMBER',1,'IS_PIXELCLOCK_CMD_GET_LIST',2,'IS_PIXELCLOCK_CMD_GET_RANGE',3,'IS_PIXELCLOCK_CMD_GET_DEFAULT',4,'IS_PIXELCLOCK_CMD_GET',5,'IS_PIXELCLOCK_CMD_SET',6);
%enuminfo.E_TRIGGER_DEBOUNCE_MODE=struct('TRIGGER_DEBOUNCE_MODE_NONE',0,'TRIGGER_DEBOUNCE_MODE_FALLING_EDGE',1,'TRIGGER_DEBOUNCE_MODE_RISING_EDGE',2,'TRIGGER_DEBOUNCE_MODE_BOTH_EDGES',4,'TRIGGER_DEBOUNCE_MODE_AUTOMATIC',8);
%enuminfo.E_SHARPNESS_CMD=struct('SHARPNESS_CMD_GET_CAPABILITIES',0,'SHARPNESS_CMD_GET_VALUE',1,'SHARPNESS_CMD_GET_MIN_VALUE',2,'SHARPNESS_CMD_GET_MAX_VALUE',3,'SHARPNESS_CMD_GET_INCREMENT',4,'SHARPNESS_CMD_GET_DEFAULT_VALUE',5,'SHARPNESS_CMD_SET_VALUE',6);
%enuminfo.E_TIMESTAMP_CONFIGURATION_MODE=struct('IS_RESET_TIMESTAMP_ONCE',1);
%enuminfo.E_FOCUS_CAPABILITY_FLAGS=struct('FOC_CAP_INVALID',0,'FOC_CAP_AUTOFOCUS_SUPPORTED',1,'FOC_CAP_MANUAL_SUPPORTED',2,'FOC_CAP_GET_DISTANCE',4,'FOC_CAP_SET_AUTOFOCUS_RANGE',8,'FOC_CAP_AUTOFOCUS_FDT_AOI',16,'FOC_CAP_AUTOFOCUS_ZONE',32);
%enuminfo.E_LOG_MODES=struct('IS_LOG_MODE_FACTORY_DEFAULT',0,'IS_LOG_MODE_OFF',1,'IS_LOG_MODE_MANUAL',2,'IS_LOG_MODE_AUTO',3);
%enuminfo.E_IS_CALLBACK_CMD=struct('IS_CALLBACK_CMD_INSTALL',1,'IS_CALLBACK_CMD_UNINSTALL',2);
%enuminfo.E_RGB_COLOR_MODELS=struct('RGB_COLOR_MODEL_SRGB_D50',1,'RGB_COLOR_MODEL_SRGB_D65',2,'RGB_COLOR_MODEL_CIE_RGB_E',4,'RGB_COLOR_MODEL_ECI_RGB_D50',8,'RGB_COLOR_MODEL_ADOBE_RGB_D65',16);
%enuminfo.e_UEYE_ETH_CONTROLSTATUS=struct('IS_ETH_CTRLSTATUS_AVAILABLE',1,'IS_ETH_CTRLSTATUS_ACCESSIBLE1',2,'IS_ETH_CTRLSTATUS_ACCESSIBLE2',4,'IS_ETH_CTRLSTATUS_PERSISTENT_IP_USED',16,'IS_ETH_CTRLSTATUS_COMPATIBLE',32,'IS_ETH_CTRLSTATUS_ADAPTER_ON_DHCP',64,'IS_ETH_CTRLSTATUS_ADAPTER_SETUP_OK',128,'IS_ETH_CTRLSTATUS_UNPAIRING_IN_PROGRESS',256,'IS_ETH_CTRLSTATUS_PAIRING_IN_PROGRESS',512,'IS_ETH_CTRLSTATUS_PAIRED',4096,'IS_ETH_CTRLSTATUS_OPENED',16384,'IS_ETH_CTRLSTATUS_FW_UPLOAD_STARTER',65536,'IS_ETH_CTRLSTATUS_FW_UPLOAD_RUNTIME',131072,'IS_ETH_CTRLSTATUS_REBOOTING',1048576,'IS_ETH_CTRLSTATUS_BOOTBOOST_ENABLED',16777216,'IS_ETH_CTRLSTATUS_BOOTBOOST_ACTIVE',33554432,'IS_ETH_CTRLSTATUS_INITIALIZED',134217728,'IS_ETH_CTRLSTATUS_TO_BE_DELETED',1073741824,'IS_ETH_CTRLSTATUS_TO_BE_REMOVED',2147483648);
%enuminfo.E_IMAGE_EFFECT_MODE=struct('IS_IMAGE_EFFECT_DISABLE',0,'IS_IMAGE_EFFECT_SEPIA',1,'IS_IMAGE_EFFECT_MONOCHROME',2,'IS_IMAGE_EFFECT_NEGATIVE',3,'IS_IMAGE_EFFECT_CROSSHAIRS',4);
%enuminfo.E_IS_MEMORY_DESCRIPTION=struct('IS_MEMORY_USER_1',1,'IS_MEMORY_USER_2',2);
%enuminfo.E_IS_MEMORY_CMD=struct('IS_MEMORY_GET_SIZE',1,'IS_MEMORY_READ',2,'IS_MEMORY_WRITE',3);
%enuminfo.e_BAYER_PIXEL=struct('BAYER_PIXEL_RED',0,'BAYER_PIXEL_GREEN',1,'BAYER_PIXEL_BLUE',2);
%enuminfo.E_VERTICAL_AOI_MERGE_MODE_LINE_TRIGGER=struct('IS_VERTICAL_AOI_MERGE_MODE_LINE_FREERUN',1,'IS_VERTICAL_AOI_MERGE_MODE_LINE_SOFTWARE_TRIGGER',2,'IS_VERTICAL_AOI_MERGE_MODE_LINE_GPIO_TRIGGER',4);
%enuminfo.E_IS_I2C_TARGET=struct('I2C_TARGET_DEFAULT',0,'I2C_TARGET_SENSOR_1',1,'I2C_TARGET_SENSOR_2',2,'I2C_TARGET_LOGIC_BOARD',4);
%enuminfo.E_MEASURE_CMD=struct('IS_MEASURE_CMD_SHARPNESS_AOI_SET',1,'IS_MEASURE_CMD_SHARPNESS_AOI_INQUIRE',2,'IS_MEASURE_CMD_SHARPNESS_AOI_SET_PRESET',3);
%enuminfo.E_EXPOSURE_CMD=struct('IS_EXPOSURE_CMD_GET_CAPS',1,'IS_EXPOSURE_CMD_GET_EXPOSURE_DEFAULT',2,'IS_EXPOSURE_CMD_GET_EXPOSURE_RANGE_MIN',3,'IS_EXPOSURE_CMD_GET_EXPOSURE_RANGE_MAX',4,'IS_EXPOSURE_CMD_GET_EXPOSURE_RANGE_INC',5,'IS_EXPOSURE_CMD_GET_EXPOSURE_RANGE',6,'IS_EXPOSURE_CMD_GET_EXPOSURE',7,'IS_EXPOSURE_CMD_GET_FINE_INCREMENT_RANGE_MIN',8,'IS_EXPOSURE_CMD_GET_FINE_INCREMENT_RANGE_MAX',9,'IS_EXPOSURE_CMD_GET_FINE_INCREMENT_RANGE_INC',10,'IS_EXPOSURE_CMD_GET_FINE_INCREMENT_RANGE',11,'IS_EXPOSURE_CMD_SET_EXPOSURE',12,'IS_EXPOSURE_CMD_GET_LONG_EXPOSURE_RANGE_MIN',13,'IS_EXPOSURE_CMD_GET_LONG_EXPOSURE_RANGE_MAX',14,'IS_EXPOSURE_CMD_GET_LONG_EXPOSURE_RANGE_INC',15,'IS_EXPOSURE_CMD_GET_LONG_EXPOSURE_RANGE',16,'IS_EXPOSURE_CMD_GET_LONG_EXPOSURE_ENABLE',17,'IS_EXPOSURE_CMD_SET_LONG_EXPOSURE_ENABLE',18,'IS_EXPOSURE_CMD_GET_DUAL_EXPOSURE_RATIO_DEFAULT',19,'IS_EXPOSURE_CMD_GET_DUAL_EXPOSURE_RATIO_RANGE',20,'IS_EXPOSURE_CMD_GET_DUAL_EXPOSURE_RATIO',21,'IS_EXPOSURE_CMD_SET_DUAL_EXPOSURE_RATIO',22);
%enuminfo.E_SCENE_CMD=struct('SCENE_CMD_GET_SUPPORTED_PRESETS',1,'SCENE_CMD_SET_PRESET',2,'SCENE_CMD_GET_PRESET',3,'SCENE_CMD_GET_DEFAULT_PRESET',4);
%enuminfo.E_VERTICAL_AOI_MERGE_MODES=struct('IS_VERTICAL_AOI_MERGE_MODE_OFF',0,'IS_VERTICAL_AOI_MERGE_MODE_FREERUN',1,'IS_VERTICAL_AOI_MERGE_MODE_TRIGGERED_SOFTWARE',2,'IS_VERTICAL_AOI_MERGE_MODE_TRIGGERED_FALLING_GPIO1',3,'IS_VERTICAL_AOI_MERGE_MODE_TRIGGERED_RISING_GPIO1',4,'IS_VERTICAL_AOI_MERGE_MODE_TRIGGERED_FALLING_GPIO2',5,'IS_VERTICAL_AOI_MERGE_MODE_TRIGGERED_RISING_GPIO2',6);
%enuminfo.E_IMGSTAB_CAPABILITY_FLAGS=struct('IMGSTAB_CAP_INVALID',0,'IMGSTAB_CAP_IMAGE_STABILIZATION_SUPPORTED',1);
%enuminfo.E_TRIGGER_DEBOUNCE_CMD=struct('TRIGGER_DEBOUNCE_CMD_SET_MODE',0,'TRIGGER_DEBOUNCE_CMD_SET_DELAY_TIME',1,'TRIGGER_DEBOUNCE_CMD_GET_SUPPORTED_MODES',2,'TRIGGER_DEBOUNCE_CMD_GET_MODE',3,'TRIGGER_DEBOUNCE_CMD_GET_DELAY_TIME',4,'TRIGGER_DEBOUNCE_CMD_GET_DELAY_TIME_MIN',5,'TRIGGER_DEBOUNCE_CMD_GET_DELAY_TIME_MAX',6,'TRIGGER_DEBOUNCE_CMD_GET_DELAY_TIME_INC',7,'TRIGGER_DEBOUNCE_CMD_GET_MODE_DEFAULT',8,'TRIGGER_DEBOUNCE_CMD_GET_DELAY_TIME_DEFAULT',9);
%enuminfo.E_AUTOPARAMETER_CMD=struct('IS_AWB_CMD_GET_SUPPORTED_TYPES',1,'IS_AWB_CMD_GET_TYPE',2,'IS_AWB_CMD_SET_TYPE',3,'IS_AWB_CMD_GET_ENABLE',4,'IS_AWB_CMD_SET_ENABLE',5,'IS_AWB_CMD_GET_SUPPORTED_RGB_COLOR_MODELS',6,'IS_AWB_CMD_GET_RGB_COLOR_MODEL',7,'IS_AWB_CMD_SET_RGB_COLOR_MODEL',8);
%enuminfo.E_SCENE_PRESET=struct('SCENE_INVALID',0,'SCENE_SENSOR_AUTOMATIC',1,'SCENE_SENSOR_PORTRAIT',2,'SCENE_SENSOR_SUNNY',4,'SCENE_SENSOR_ENTERTAINMENT',8,'SCENE_SENSOR_NIGHT',16,'SCENE_SENSOR_SPORTS',64,'SCENE_SENSOR_LANDSCAPE',128);
%enuminfo.E_BLACKLEVEL_CAPS=struct('IS_BLACKLEVEL_CAP_SET_AUTO_BLACKLEVEL',1,'IS_BLACKLEVEL_CAP_SET_OFFSET',2);
%enuminfo.E_ZOOM_CMD=struct('ZOOM_CMD_GET_CAPABILITIES',0,'ZOOM_CMD_DIGITAL_GET_NUM_LIST_ENTRIES',1,'ZOOM_CMD_DIGITAL_GET_LIST',2,'ZOOM_CMD_DIGITAL_SET_VALUE',3,'ZOOM_CMD_DIGITAL_GET_VALUE',4,'ZOOM_CMD_DIGITAL_GET_VALUE_RANGE',5,'ZOOM_CMD_DIGITAL_GET_VALUE_DEFAULT',6);
%enuminfo.E_LEVEL_CONTROLLED_TRIGGER_INPUT_MODES=struct('IS_LEVEL_CONTROLLED_TRIGGER_INPUT_OFF',0,'IS_LEVEL_CONTROLLED_TRIGGER_INPUT_ON',1);
%enuminfo.E_BLACKLEVEL_CMD=struct('IS_BLACKLEVEL_CMD_GET_CAPS',1,'IS_BLACKLEVEL_CMD_GET_MODE_DEFAULT',2,'IS_BLACKLEVEL_CMD_GET_MODE',3,'IS_BLACKLEVEL_CMD_SET_MODE',4,'IS_BLACKLEVEL_CMD_GET_OFFSET_DEFAULT',5,'IS_BLACKLEVEL_CMD_GET_OFFSET_RANGE',6,'IS_BLACKLEVEL_CMD_GET_OFFSET',7,'IS_BLACKLEVEL_CMD_SET_OFFSET',8);
%enuminfo.E_NOISE_REDUCTION_MODES=struct('IS_NOISE_REDUCTION_OFF',0,'IS_NOISE_REDUCTION_ADAPTIVE',1);
%enuminfo.E_IS_DEVICE_INFO_CMD=struct('IS_DEVICE_INFO_CMD_GET_DEVICE_INFO',33619969);
%enuminfo.E_FOCUS_RANGE=struct('FOC_RANGE_NORMAL',1,'FOC_RANGE_ALLRANGE',2,'FOC_RANGE_MACRO',4);
%enuminfo.E_TRANSFER_CAPABILITY_FLAGS=struct('TRANSFER_CAP_IMAGEDELAY',1,'TRANSFER_CAP_PACKETINTERVAL',32);
%enuminfo.E_CONFIGURATION_SEL=struct('IS_CONFIG_CPU_IDLE_STATES_BIT_AC_VALUE',1,'IS_CONFIG_CPU_IDLE_STATES_BIT_DC_VALUE',2,'IS_CONFIG_IPO_NOT_ALLOWED',0,'IS_CONFIG_IPO_ALLOWED',1,'IS_CONFIG_OPEN_MP_DISABLE',0,'IS_CONFIG_OPEN_MP_ENABLE',1,'IS_CONFIG_INITIAL_PARAMETERSET_NONE',0,'IS_CONFIG_INITIAL_PARAMETERSET_1',1,'IS_CONFIG_INITIAL_PARAMETERSET_2',2,'IS_CONFIG_ETH_CONFIGURATION_MODE_OFF',0,'IS_CONFIG_ETH_CONFIGURATION_MODE_ON',1,'IS_CONFIG_TRUSTED_PAIRING_OFF',0,'IS_CONFIG_TRUSTED_PAIRING_ON',1);
%enuminfo.E_EXPOSURE_CAPS=struct('IS_EXPOSURE_CAP_EXPOSURE',1,'IS_EXPOSURE_CAP_FINE_INCREMENT',2,'IS_EXPOSURE_CAP_LONG_EXPOSURE',4,'IS_EXPOSURE_CAP_DUAL_EXPOSURE',8);
%enuminfo.E_TIMESTAMP_CONFIGURATION_EDGE=struct('TIMESTAMP_CONFIGURATION_EDGE_FALLING',0,'TIMESTAMP_CONFIGURATION_EDGE_RISING',1);
%enuminfo.E_TRIGGER_CMD=struct('IS_TRIGGER_CMD_GET_BURST_SIZE_SUPPORTED',1,'IS_TRIGGER_CMD_GET_BURST_SIZE_RANGE',2,'IS_TRIGGER_CMD_GET_BURST_SIZE',3,'IS_TRIGGER_CMD_SET_BURST_SIZE',4,'IS_TRIGGER_CMD_GET_FRAME_PRESCALER_SUPPORTED',5,'IS_TRIGGER_CMD_GET_FRAME_PRESCALER_RANGE',6,'IS_TRIGGER_CMD_GET_FRAME_PRESCALER',7,'IS_TRIGGER_CMD_SET_FRAME_PRESCALER',8,'IS_TRIGGER_CMD_GET_LINE_PRESCALER_SUPPORTED',9,'IS_TRIGGER_CMD_GET_LINE_PRESCALER_RANGE',10,'IS_TRIGGER_CMD_GET_LINE_PRESCALER',11,'IS_TRIGGER_CMD_SET_LINE_PRESCALER',12);
%enuminfo.E_FOCUS_ZONE_WEIGHT=struct('FOC_ZONE_WEIGHT_DISABLE',0,'FOC_ZONE_WEIGHT_WEAK',33,'FOC_ZONE_WEIGHT_MIDDLE',50,'FOC_ZONE_WEIGHT_STRONG',66);
%enuminfo.E_IS_BOOTBOOST_CMD=struct('IS_BOOTBOOST_CMD_ENABLE',65537,'IS_BOOTBOOST_CMD_ENABLE_AND_WAIT',65793,'IS_BOOTBOOST_CMD_DISABLE',65553,'IS_BOOTBOOST_CMD_DISABLE_AND_WAIT',65809,'IS_BOOTBOOST_CMD_WAIT',65792,'IS_BOOTBOOST_CMD_GET_ENABLED',536936481,'IS_BOOTBOOST_CMD_ADD_ID',269484033,'IS_BOOTBOOST_CMD_SET_IDLIST',269484037,'IS_BOOTBOOST_CMD_REMOVE_ID',269484049,'IS_BOOTBOOST_CMD_CLEAR_IDLIST',1048597,'IS_BOOTBOOST_CMD_GET_IDLIST',806354977,'IS_BOOTBOOST_CMD_GET_IDLIST_SIZE',537919522);
%enuminfo.E_MEASURE_SHARPNESS_AOI_PRESETS=struct('IS_MEASURE_SHARPNESS_AOI_PRESET_1',1);
%enuminfo.E_WHITEBALANCE_MODE=struct('WB_MODE_DISABLE',0,'WB_MODE_AUTO',1,'WB_MODE_ALL_PULLIN',2,'WB_MODE_INCANDESCENT_LAMP',4,'WB_MODE_FLUORESCENT_DL',8,'WB_MODE_OUTDOOR_CLEAR_SKY',16,'WB_MODE_OUTDOOR_CLOUDY',32,'WB_MODE_FLUORESCENT_LAMP',64,'WB_MODE_FLUORESCENT_NL',128);
%enuminfo.E_FOCUS_STATUS=struct('FOC_STATUS_ERROR',1,'FOC_STATUS_FOCUSED',2,'FOC_STATUS_FOCUSING',4,'FOC_STATUS_TIMEOUT',8,'FOC_STATUS_CANCEL',16);
%enuminfo.E_SATURATION_CMD=struct('SATURATION_CMD_GET_CAPABILITIES',0,'SATURATION_CMD_GET_VALUE',1,'SATURATION_CMD_GET_MIN_VALUE',2,'SATURATION_CMD_GET_MAX_VALUE',3,'SATURATION_CMD_GET_INCREMENT',4,'SATURATION_CMD_GET_DEFAULT_VALUE',5,'SATURATION_CMD_SET_VALUE',6);
%enuminfo.E_FPN_CORRECTION_MODES=struct('IS_FPN_CORRECTION_MODE_OFF',0,'IS_FPN_CORRECTION_MODE_HARDWARE',1);
%enuminfo.E_FDT_CAPABILITY_FLAGS=struct('FDT_CAP_INVALID',0,'FDT_CAP_SUPPORTED',1,'FDT_CAP_SEARCH_ANGLE',2,'FDT_CAP_SEARCH_AOI',4,'FDT_CAP_INFO_POSX',16,'FDT_CAP_INFO_POSY',32,'FDT_CAP_INFO_WIDTH',64,'FDT_CAP_INFO_HEIGHT',128,'FDT_CAP_INFO_ANGLE',256,'FDT_CAP_INFO_POSTURE',512,'FDT_CAP_INFO_FACENUMBER',1024,'FDT_CAP_INFO_OVL',2048,'FDT_CAP_INFO_NUM_OVL',4096,'FDT_CAP_INFO_OVL_LINEWIDTH',8192);
%enuminfo.E_ZOOM_CAPABILITY_FLAGS=struct('ZOOM_CAP_INVALID',0,'ZOOM_CAP_DIGITAL_ZOOM',1);
%enuminfo.E_IPCONFIG_CAPABILITY_FLAGS=struct('IPCONFIG_CAP_PERSISTENT_IP_SUPPORTED',1,'IPCONFIG_CAP_AUTOCONFIG_IP_SUPPORTED',4);
%enuminfo.E_COLOR_TEMPERATURE_CMD=struct('COLOR_TEMPERATURE_CMD_SET_TEMPERATURE',0,'COLOR_TEMPERATURE_CMD_SET_RGB_COLOR_MODEL',1,'COLOR_TEMPERATURE_CMD_GET_SUPPORTED_RGB_COLOR_MODELS',2,'COLOR_TEMPERATURE_CMD_GET_TEMPERATURE',3,'COLOR_TEMPERATURE_CMD_GET_RGB_COLOR_MODEL',4,'COLOR_TEMPERATURE_CMD_GET_TEMPERATURE_MIN',5,'COLOR_TEMPERATURE_CMD_GET_TEMPERATURE_MAX',6,'COLOR_TEMPERATURE_CMD_GET_TEMPERATURE_INC',7,'COLOR_TEMPERATURE_CMD_GET_TEMPERATURE_DEFAULT',8,'COLOR_TEMPERATURE_CMD_GET_RGB_COLOR_MODEL_DEFAULT',9,'COLOR_TEMPERATURE_CMD_SET_LENS_SHADING_MODEL',10,'COLOR_TEMPERATURE_CMD_GET_LENS_SHADING_MODEL',11,'COLOR_TEMPERATURE_CMD_GET_LENS_SHADING_MODEL_SUPPORTED',12,'COLOR_TEMPERATURE_CMD_GET_LENS_SHADING_MODEL_DEFAULT',13);
methodinfo=fcns;
